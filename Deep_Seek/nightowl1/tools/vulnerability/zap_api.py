# Note: This requires a running ZAP instance and API key
import time
import requests
from core.error_handler import ErrorHandler

ZAP_API_URL = "http://localhost:8080"
API_KEY = "your-api-key"

def run(target, progress_callback=None):
    """Run OWASP ZAP for vulnerability scanning"""
    results = {"vulnerabilities": []}
    
    try:
        # Start ZAP scan
        scan_url = f"{ZAP_API_URL}/JSON/ascan/action/scan/?apikey={API_KEY}&url={target}&recurse=true"
        response = requests.get(scan_url)
        scan_id = response.json().get("scan")
        
        # Monitor scan progress
        while True:
            status_url = f"{ZAP_API_URL}/JSON/ascan/view/status/?apikey={API_KEY}&scanId={scan_id}"
            status_resp = requests.get(status_url)
            status = status_resp.json().get("status")
            
            if progress_callback:
                progress_callback("zap", int(status), "Scanning...")
            
            if status == "100":
                break
            time.sleep(5)
        
        # Retrieve results
        alerts_url = f"{ZAP_API_URL}/JSON/core/view/alerts/?apikey={API_KEY}&baseurl={target}"
        alerts_resp = requests.get(alerts_url)
        alerts = alerts_resp.json().get("alerts", [])
        
        for alert in alerts:
            results["vulnerabilities"].append({
                "name": alert.get("name"),
                "risk": alert.get("risk"),
                "url": alert.get("url"),
                "description": alert.get("description")
            })
        
        return results
    
    except Exception as e:
        ErrorHandler.log_error("zap", str(e), target)
        raise