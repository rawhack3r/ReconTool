import json
import os

class VulnerabilityScanner:
    OWASP_TOP_10 = {
        "A1": "Injection",
        "A2": "Broken Authentication",
        "A3": "Sensitive Data Exposure",
        "A4": "XXE",
        "A5": "Broken Access Control",
        "A6": "Security Misconfiguration",
        "A7": "XSS",
        "A8": "Insecure Deserialization",
        "A9": "Vulnerable Components",
        "A10": "Insufficient Logging"
    }
    
    def categorize_vulnerabilities(self, results):
        """Categorize vulnerabilities by type and OWASP Top 10"""
        vulnerabilities = {key: [] for key in self.OWASP_TOP_10.keys()}
        vulnerabilities["other"] = []
        
        # Extract all vulnerabilities from results
        all_vulns = []
        for phase, tools in results.items():
            for tool, data in tools.items():
                if "vulnerabilities" in data.get('result', {}):
                    all_vulns.extend(data['result']['vulnerabilities'])
        
        # Categorize each vulnerability
        for vuln in all_vulns:
            category = self._classify_vulnerability(vuln)
            if category:
                vulnerabilities[category].append(vuln)
            else:
                vulnerabilities["other"].append(vuln)
        
        # Save to vulnerability directory
        self._save_vulnerabilities(vulnerabilities)
        return vulnerabilities
    
    def _classify_vulnerability(self, vuln):
        """Classify vulnerability by OWASP Top 10"""
        vuln_type = vuln.get('type', '').lower()
        
        if "sql" in vuln_type or "command" in vuln_type or "nosql" in vuln_type:
            return "A1"
        elif "auth" in vuln_type or "session" in vuln_type:
            return "A2"
        elif "exposure" in vuln_type or "secret" in vuln_type:
            return "A3"
        elif "xxe" in vuln_type:
            return "A4"
        elif "access" in vuln_type or "idor" in vuln_type:
            return "A5"
        elif "config" in vuln_type or "misconfig" in vuln_type:
            return "A6"
        elif "xss" in vuln_type:
            return "A7"
        elif "deserialization" in vuln_type:
            return "A8"
        elif "component" in vuln_type or "dependency" in vuln_type:
            return "A9"
        elif "logging" in vuln_type or "monitoring" in vuln_type:
            return "A10"
        return None
    
    def _save_vulnerabilities(self, vulnerabilities):
        """Save vulnerabilities to categorized files"""
        for category, vulns in vulnerabilities.items():
            if vulns:
                with open(f"outputs/vulnerabilities/{category}.json", "w") as f:
                    json.dump(vulns, f, indent=2)