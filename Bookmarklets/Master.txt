javascript:(function(){  const tools = {    1: {name:"Extract Paths", run: function(){      const paths=[...document.querySelectorAll("a[href]")]        .map(a=>new URL(a.href,location.href).pathname)        .filter((v,i,a)=>a.indexOf(v)===i);      download(paths,"paths.txt");    }},    2: {name:"Extract IPs", run: function(){      const regex=/\b(?:\d{1,3}\.){3}\d{1,3}\b/g;      const ips=(document.body.innerText.match(regex)||[])        .filter((v,i,a)=>a.indexOf(v)===i);      download(ips,"ips.txt");    }},    3: {name:"Extract Domains", run: function(){      const regex=/\b(?!(?:\d{1,3}\.){3}\d{1,3}\b)(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z]{2,63}\b/gi;      const domains=(document.body.innerText.match(regex)||[])        .map(d=>d.toLowerCase())        .filter((v,i,a)=>a.indexOf(v)===i);      download(domains,"domains.txt");    }},    4: {name:"Extract Endpoints", run: function(){      const regex=/\/(?:api|v\d+|graphql|auth|token|config|status|health|upload|download)[^\s"%27<>]{0,100}/gi;      const matches=new Set();      [...document.querySelectorAll("script:not([src])")].forEach(s=>{        const m=s.textContent.match(regex); if(m) m.forEach(x=>matches.add(x));      });      [...document.querySelectorAll("*")].forEach(el=>{        for(const a of el.attributes){          const m=a.value.match(regex); if(m) m.forEach(x=>matches.add(x));        }      });      const list=[...matches].filter((v,i,a)=>a.indexOf(v)===i);      download(list,"endpoints.txt");    }},    5: {name:"Extract JS Files", run: function(){      const scripts=[...document.querySelectorAll("script[src]")]        .map(s=>s.src.trim())        .filter((v,i,a)=>v && a.indexOf(v)===i);      download(scripts,"jsfiles.txt");    }},    6: {name:"Find Open Redirects", run: function(){      const links=[...document.querySelectorAll("a[href]")]        .map(a=>a.href)        .filter(h=>/[?&](next|url|redirect|target|r)=/i.test(h))        .filter((v,i,a)=>a.indexOf(v)===i);      download(links,"redirects.txt");    }},    7: {name:"Hidden Inputs", run: function(){      const inputs=[...document.querySelectorAll(%27input[type="hidden"]%27)]        .map(i=>`${i.name||%27[no name]%27}=${i.value}`)        .filter(Boolean);      download(inputs,"hidden_inputs.txt");    }},    8: {name:"Debug/Dev Endpoints", run: function(){      const regex=/\/(?:debug|test|internal|dev|sandbox|staging|qa)[^\s"%27<>]{0,100}/gi;      const matches=new Set();      [...document.querySelectorAll("*")].forEach(el=>{        for(const a of el.attributes){          const m=a.value.match(regex); if(m) m.forEach(x=>matches.add(x));        }      });      download([...matches],"debug_endpoints.txt");    }},    9: {name:"Extract Tokens/JWTs", run: function(){      const tokenRegex=/eyJ[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+/g;      const matches=new Set();      [...document.querySelectorAll("script:not([src])")].forEach(s=>{        const m=s.textContent.match(tokenRegex); if(m) m.forEach(x=>matches.add(x));      });      [...document.querySelectorAll("*")].forEach(el=>{        for(const a of el.attributes){          const m=a.value.match(tokenRegex); if(m) m.forEach(x=>matches.add(x));        }      });      download([...matches],"tokens.txt");    }},    10: {name:"Internal Links Crawl", run: function(){      const origin=location.origin;      const links=[...document.querySelectorAll("a[href]")]        .map(a=>a.href)        .filter(h=>h.startsWith(origin))        .filter((v,i,a)=>a.indexOf(v)===i);      download(links,"internal_links.txt");    }}  };  function download(arr,filename){    if(!arr.length){alert("No results found.");return;}    const blob=new Blob([arr.join("\n")],{type:"text/plain"});    const a=document.createElement("a");    a.href=URL.createObjectURL(blob);    a.download=filename;    document.body.appendChild(a);    a.click();    document.body.removeChild(a);    URL.revokeObjectURL(a.href);    alert("âœ… "+arr.length+" items saved to "+filename);  }  let menu="Choose tool by number:\n";  for(const k in tools){menu+=k+". "+tools[k].name+"\n";}  const choice=prompt(menu);  if(choice && tools[choice]) tools[choice].run();  else if(choice) alert("Invalid choice: "+choice);})();