import subprocess
from core.error_handler import ErrorHandler
import os
import json

def run_zap(target, output):
    command = f"zap-api-scan.py -t {target} -f json -o {output}"
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return parse_zap_output(output)
    except subprocess.CalledProcessError as e:
        ErrorHandler.log_error(f"ZAP failed for {target}: {e.stderr.decode()}")
        return []

def parse_zap_output(output_file):
    vulnerabilities = []
    scanner = VulnerabilityScanner()
    with open(output_file, 'r') as f:
        data = json.load(f)
        for alert in data.get('alerts', []):
            vulnerabilities.append({
                'domain': data.get('site', ''),
                'path': alert.get('url', ''),
                'type': alert.get('name', ''),
                'severity': alert.get('risk', ''),
                'owasp_category': scanner.map_to_owasp_top_10(alert.get('name', ''))
            })
            with open("output/vulnerabilities/vulns.txt", "a") as f:
                f.write(f"{data.get('site')} - {alert.get('url')} - {alert.get('name')} ({alert.get('risk')}) - OWASP: {scanner.map_to_owasp_top_10(alert.get('name'))}\n")
    return vulnerabilities