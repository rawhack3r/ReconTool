from datetime import datetime
from pathlib import Path
import markdown2
import json

def generate_markdown_report(target, stats, errors, output_dir):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    important_path = output_dir / "important"
    vuln_path = output_dir / "vuln"

    report_lines = [
        f"# 🦉 NightOwl Recon Report for `{target}`",
        f"📅 Scan Timestamp: **{now}**",
        f"📁 Output Directory: `{output_dir.resolve()}`",
        "\n---\n",
        "## ⚙️ Tool Results",
        "| Tool | Status | Duration | Output |",
        "|------|--------|----------|--------|"
    ]

    for stat in stats:
        icon = "✅" if stat.get("success") else "❌"
        
        # ✔ Safe duration formatting
        dur_val = stat.get("duration")
        dur = f"{dur_val:.2f}s" if isinstance(dur_val, (float, int)) else "-"

        out = stat.get("output", stat.get("error", "-")).replace(str(output_dir), "...")
        report_lines.append(f"| {stat.get('tool', 'unknown')} | {icon} | {dur} | `{out}` |")

    # ✔ Important Findings Section
    if important_path.exists():
        report_lines.append("\n## 🔐 Important Info Extracted")
        for fname in ["emails.txt", "phones.txt", "names.txt", "secrets.txt"]:
            fpath = important_path / fname
            if fpath.exists():
                count = len(fpath.read_text(encoding="utf-8", errors='ignore').splitlines())
                report_lines.append(f"- `{fname}`: {count} match(es)")

    # ✔ Vulnerability Findings Section
    if vuln_path.exists():
        report_lines.append("\n## 🚨 Vulnerabilities Detected")
        for f in ["cve_list.txt", "owasp_mapped.json", "critical_paths.txt"]:
            fpath = vuln_path / f
            if fpath.exists():
                lines = fpath.read_text(encoding="utf-8", errors='ignore').splitlines()
                report_lines.append(f"- `{f}`: {len(lines)} item(s)")

    # ✔ Error Section
    if errors:
        report_lines.append("\n## ❗ Errors/Failures Detected")
        for err in errors:
            report_lines.append(f"- 🛑 `{err.get('tool', 'unknown')}`: {err.get('error', '-')[:100]}")

    report_lines.append("\n---\n")
    report_lines.append("_Generated by NightOwl Elite • By n00bh4ck3r • Made in 🇮🇳 India_")

    # ✔ Write Markdown report
    md_path = output_dir / "report.md"
    md_path.write_text("\n".join(report_lines), encoding="utf-8")
    return md_path


def render_html_report(md_path):
    html_content = markdown2.markdown(md_path.read_text(encoding="utf-8", errors="ignore"))
    html_output = md_path.with_suffix(".html")

    html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>NightOwl Recon Report | {md_path.stem}</title>
    <style>
        body {{ font-family: sans-serif; margin: 2em; background: #f8f8f8; }}
        h1, h2, h3 {{ color: #333; }}
        table {{ border-collapse: collapse; width: 100%; margin-top: 1em; }}
        th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
        th {{ background-color: #eee; }}
        code {{ background: #eee; padding: 2px 4px; border-radius: 4px; }}
        ul {{ padding-left: 1.5em; }}
    </style>
</head>
<body>
{html_content}
</body>
</html>
"""
    html_output.write_text(html, encoding="utf-8")
    return html_output
