import asyncio
import os
from rich.console import Console

console = Console()

async def run_cmd(cmd):
    console.log(f"[cyan]Running:[/cyan] {cmd}")
    proc = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        console.log(f"[red]Error running command:[/red] {cmd}\n{stderr.decode()}")
    return stdout.decode()

def deduplicate_files(input_files, output_file):
    seen = set()
    with open(output_file, "w") as outfile:
        for fname in input_files:
            if os.path.exists(fname):
                with open(fname) as infile:
                    for line in infile:
                        line = line.strip()
                        if line and line not in seen:
                            seen.add(line)
                            outfile.write(line + "\n")

def load_targets(target_input):
    import glob
    import os
    targets = []
    if os.path.isfile(target_input):
        with open(target_input) as f:
            targets = [line.strip() for line in f if line.strip()]
    elif "*" in target_input or "?" in target_input:
        targets = glob.glob(target_input)
    else:
        targets = [target_input]
    return targets

def save_summary(output_dir, resource_monitor):
    summary_file = os.path.join(output_dir, "summary.txt")
    with open(summary_file, "w") as f:
        f.write("Recon Tool Summary\n")
        f.write("==================\n")
        f.write(f"CPU Usage (avg): {resource_monitor.cpu_avg:.2f}%\n")
        f.write(f"Memory Usage (avg): {resource_monitor.mem_avg:.2f} MB\n")
        f.write(f"Total Runtime: {resource_monitor.elapsed:.2f} seconds\n")
