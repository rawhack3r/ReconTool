import asyncio
import os
from modules.utils import run_cmd, deduplicate_files
from rich.console import Console

console = Console()

async def run_subdomain_enum(targets, output_dir, mode):
    console.rule("[bold blue]Subdomain Enumeration[/bold blue]")
    tasks = []
    subdomain_files = []

    for target in targets:
        target_dir = os.path.join(output_dir, "subdomains", target)
        os.makedirs(target_dir, exist_ok=True)

        crtsh_file = os.path.join(target_dir, "crtsh.txt")
        amass_file = os.path.join(target_dir, "amass_passive.txt")
        subfinder_file = os.path.join(target_dir, "subfinder.txt")
        assetfinder_file = os.path.join(target_dir, "assetfinder.txt")

        # crt.sh
        tasks.append(run_cmd(f"curl -s https://crt.sh/?q=%25.{target}&output=json | jq -r '.[].name_value' | sed 's/*\\.//g' | sort -u > {crtsh_file}"))

        # amass passive
        tasks.append(run_cmd(f"amass enum -passive -d {target} -o {amass_file}"))

        # subfinder
        tasks.append(run_cmd(f"subfinder -d {target} -silent -o {subfinder_file}"))

        # assetfinder
        tasks.append(run_cmd(f"assetfinder --subs-only {target} > {assetfinder_file}"))

        if mode == "deep":
            amass_brute_file = os.path.join(target_dir, "amass_brute.txt")
            ffuf_file = os.path.join(target_dir, "ffuf_subs.txt")
            tasks.append(run_cmd(f"amass enum -brute -d {target} -o {amass_brute_file}"))
            wordlist = os.path.join("wordlists", "subdomains.txt")
            tasks.append(run_cmd(f"ffuf -w {wordlist} -u https://FUZZ.{target} -mc 200 -o {ffuf_file} -of csv"))

            subdomain_files.extend([amass_brute_file, ffuf_file])

        subdomain_files.extend([crtsh_file, amass_file, subfinder_file, assetfinder_file])

    await asyncio.gather(*tasks)

    combined_file = os.path.join(output_dir, "all_subdomains.txt")
    deduplicate_files(subdomain_files, combined_file)

    console.print(f"[green]Combined subdomains saved to {combined_file}[/green]")
    return combined_file
