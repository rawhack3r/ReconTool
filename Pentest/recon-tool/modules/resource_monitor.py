import threading
import time
import psutil

class ResourceMonitor:
    def __init__(self, interval=1):
        self.interval = interval
        self.cpu_samples = []
        self.mem_samples = []
        self.running = False
        self.start_time = None
        self.end_time = None

    def _monitor(self):
        while self.running:
            self.cpu_samples.append(psutil.cpu_percent())
            self.mem_samples.append(psutil.virtual_memory().used / (1024 * 1024))  # MB
            time.sleep(self.interval)

    def start(self):
        self.running = True
        self.start_time = time.time()
        self.thread = threading.Thread(target=self._monitor)
        self.thread.start()

    def stop(self):
        self.running = False
        self.thread.join()
        self.end_time = time.time()

    @property
    def cpu_avg(self):
        return sum(self.cpu_samples) / len(self.cpu_samples) if self.cpu_samples else 0

    @property
    def mem_avg(self):
        return sum(self.mem_samples) / len(self.mem_samples) if self.mem_samples else 0

    @property
    def elapsed(self):
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return 0
