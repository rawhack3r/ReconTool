import argparse
import asyncio
import os
from datetime import datetime
from rich.console import Console
from modules.subdomain_enum import run_subdomain_enum
from modules.live_check import run_live_check
from modules.takeover_check import run_takeover_check
from modules.content_discovery import run_content_discovery
from modules.vuln_scan import run_vuln_scan
from modules.utils import load_targets, save_summary
from modules.resource_monitor import ResourceMonitor

console = Console()

async def main():
    parser = argparse.ArgumentParser(description="Unified Recon Tool")
    parser.add_argument("target", help="Target domain, file with targets, or wildcard pattern")
    parser.add_argument("-m", "--mode", choices=["default", "deep"], default="default", help="Scan mode")
    parser.add_argument("-o", "--output", help="Output directory")
    args = parser.parse_args()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = args.output or os.path.join("output", f"recon_{timestamp}")
    os.makedirs(output_dir, exist_ok=True)

    targets = load_targets(args.target)
    if not targets:
        console.print("[red]No valid targets found. Exiting.[/red]")
        return

    console.rule("[bold cyan]Starting Recon Tool[/bold cyan]")
    console.print(f"Mode: [green]{args.mode}[/green]")
    console.print(f"Targets: [green]{len(targets)}[/green]")
    console.print(f"Output Directory: [green]{output_dir}[/green]\n")

    resource_monitor = ResourceMonitor()
    resource_monitor.start()

    # Phase 1: Subdomain Enumeration
    subdomains_file = await run_subdomain_enum(targets, output_dir, args.mode)

    # Phase 2: Live Host Checking
    alive_file = await run_live_check(subdomains_file, output_dir)

    # Phase 3: Subdomain Takeover Check (Deep mode)
    if args.mode == "deep":
        await run_takeover_check(alive_file, output_dir)

    # Phase 4: Content Discovery (Deep mode)
    if args.mode == "deep":
        await run_content_discovery(alive_file, output_dir)

    # Phase 5: Vulnerability Scanning (Deep mode)
    if args.mode == "deep":
        await run_vuln_scan(alive_file, output_dir)

    resource_monitor.stop()

    save_summary(output_dir, resource_monitor)

    console.rule("[bold green]Recon Completed[/bold green]")

if __name__ == "__main__":
    asyncio.run(main())
